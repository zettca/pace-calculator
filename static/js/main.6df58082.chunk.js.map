{"version":3,"sources":["withLayout.js","components/Main/utils.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["withLayout","Component","style","minHeight","display","alignItems","Container","Card","CardContent","ff00","n","String","f00","Math","floor","calcTime","dist","speed","calcSpeed","time","TS","distances","label","value","speeds","Main","useState","setTime","setDist","setSpeed","timeLocked","setTimeLocked","handleDist","evt","sign","deltaY","handleSpeed","calcDist","kph","mpk","ms","map","join","parsedTime","Typography","component","variant","type","onChange","split","reduce","acc","el","i","Number","parseTime","target","step","IconButton","onClick","toFixed","Slider","onWheel","min","max","d","Button","color","key","theme","createMuiTheme","status","danger","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6df58082.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Container } from \"@material-ui/core\";\n\nconst withLayout = Component => (\n  <main style={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\" }}>\n    <Container>\n      <Card>\n        <CardContent>\n          <Component />\n        </CardContent>\n      </Card>\n    </Container>\n  </main>\n);\n\nexport default withLayout;\n","export const SEC = 1;\nexport const MIN = 60 * SEC;\nexport const HOUR = 60 * MIN;\n\nexport const f00 = n => (n < 10 ? `0${n}` : String(n));\nexport const ff00 = n => f00(Math.floor(n));\nexport const calcTime = (dist, speed) => (dist / speed) * HOUR; // seconds\nexport const calcDist = (time, speed) => (speed * time) / HOUR; // meters\nexport const calcPace = (time, dist) => (time / dist) * 1000; // seconds(/km)\nexport const calcSpeed = (time, dist) => (dist * HOUR) / time; // meters(/hour)\n\nconst TS = [HOUR, MIN, SEC];\nexport const parseTime = (time = \"\") =>\n  time.split(\":\").reduce((acc, el, i) => acc + (Number(el) * TS[i] || 0), 0);\n","import React, { useState } from \"react\";\nimport { Button, IconButton, Slider, Typography } from \"@material-ui/core\";\nimport LockIconOutlined from \"@material-ui/icons/Lock\";\nimport LockOpenIconOutlined from \"@material-ui/icons/LockOpen\";\nimport { ff00, parseTime, calcSpeed, calcTime, calcDist } from \"./utils\";\n\nconst distances = [\n  { label: \"Mile\", value: 1610 },\n  { label: \"5K\", value: 5000 },\n  { label: \"10K\", value: 10000 },\n  { label: \"Â½ Marathon\", value: 21100 },\n  { label: \"Marathon\", value: 42200 },\n  { label: \"50K\", value: 50000 },\n  { label: \"100K\", value: 100000 },\n];\n\nconst speeds = [\n  { label: \"Walk\", value: 6000 },\n  { label: \"Jog\", value: 8000 },\n  { label: \"Run\", value: 12000 },\n  { label: \"Fast\", value: 15000 },\n  { label: \"Bekele\", value: 24000 },\n];\n\nconst Main = () => {\n  const [time, setTime] = useState(90 * 60 + 20);\n  const [dist, setDist] = useState(10000);\n  const [speed, setSpeed] = useState(10000);\n  const [timeLocked, setTimeLocked] = useState(true);\n\n  const stepDist = 100;\n  const stepSpeed = 100;\n\n  const handleTime = (evt, value) => {\n    setTime(value || parseTime(evt.target.value));\n    setSpeed(calcSpeed(time, dist));\n  };\n\n  const handleDist = (evt, value) => {\n    setDist(value || dist + stepDist * -Math.sign(evt.deltaY));\n    timeLocked ? setSpeed(calcSpeed(time, dist)) : setTime(calcTime(dist, speed));\n  };\n\n  const handleSpeed = (evt, value) => {\n    setSpeed(value || speed + stepSpeed * -Math.sign(evt.deltaY));\n    timeLocked ? setDist(calcDist(time, speed)) : setTime(calcTime(dist, speed));\n  };\n\n  const toggleTimeLock = () => setTimeLocked(!timeLocked);\n\n  const kph = speed / 1000;\n  const mpk = 60 / kph;\n  const ms = [mpk, (mpk % 1) * 60].map(ff00).join(\":\");\n  const parsedTime = [time / 3600, Math.floor(time / 60) % 60, time % 60].map(ff00).join(\":\");\n\n  return (\n    <>\n      <section>\n        <Typography component=\"h1\" variant=\"h6\">\n          Time\n        </Typography>\n        <input type=\"time\" value={parsedTime} onChange={handleTime} step={1} />\n        <IconButton onClick={toggleTimeLock}>\n          {timeLocked ? <LockIconOutlined /> : <LockOpenIconOutlined />}\n        </IconButton>\n      </section>\n      <section>\n        <Typography component=\"h1\" variant=\"h6\">\n          {`Distance ${(dist / 1000).toFixed(1)}km`}\n        </Typography>\n        <Slider\n          value={dist}\n          onChange={handleDist}\n          onWheel={handleDist}\n          min={100}\n          max={50000}\n          step={stepDist}\n        />\n        <div>\n          {distances.map((d, i) => (\n            <Button color=\"primary\" key={`d${d.value}`} onClick={() => handleDist(\"\", d.value)}>\n              {d.label}\n            </Button>\n          ))}\n        </div>\n      </section>\n      <section>\n        <Typography component=\"h1\" variant=\"h6\">\n          {`Pace ${ms}/km (${kph.toFixed(1)}kph)`}\n        </Typography>\n        <Slider\n          color=\"secondary\"\n          value={speed}\n          onChange={handleSpeed}\n          onWheel={handleSpeed}\n          min={6000}\n          max={24000}\n          step={stepSpeed}\n        />\n        <div>\n          {speeds.map((d, i) => (\n            <Button color=\"secondary\" key={`s${d.value}`} onClick={() => handleSpeed(\"\", d.value)}>\n              {d.label}\n            </Button>\n          ))}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\n// import { store } from \"store\";\n// import { Provider } from \"react-redux\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport withLayout from \"./withLayout\";\nimport Main from \"./components/Main\";\n// import \"./App.css\";\n\nconst theme = createMuiTheme({\n  status: {\n    danger: \"yellow\",\n  },\n});\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    {withLayout(Main)}\n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}