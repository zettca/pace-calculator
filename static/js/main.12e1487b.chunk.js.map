{"version":3,"sources":["layout/renderLayout.js","utils/index.js","components/TimePicker.js","components/SpeedPicker.js","components/DistancePicker.js","utils/useCalc.js","components/Main.js","serviceWorker.js","index.js"],"names":["withLayout","element","num","Math","floor","random","bgStyles","background","backgroundSize","minHeight","display","style","Container","margin","width","Card","CardContent","ff00","n","String","f00","calcTime","dist","speed","calcSpeed","time","TS","TimePicker","onChange","step","parsedTime","map","join","type","value","speeds","label","SpeedPicker","color","Slider","min","max","onWheel","d","Button","key","onClick","e","distances","useCalc","initialState","initialTime","initialDist","initialSpeed","setTime","useState","setDist","setSpeed","timeLocked","setTimeLocked","newValue","newTime","newDist","newSpeed","calcDist","Main","update","kph","mpk","ms","Typography","component","variant","evt","split","reduce","acc","el","i","Number","parseTime","target","IconButton","toFixed","DistancePicker","sign","deltaY","Boolean","window","location","hostname","match","App","prefersDarkMode","useMediaQuery","theme","useMemo","createMuiTheme","palette","ThemeProvider","CssBaseline","renderLayout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12e1487b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Container } from \"@material-ui/core\";\n\nconst withLayout = (element) => {\n  const num = Math.floor(Math.random() * 7);\n  const bgStyles = {\n    background: `url(img/bg${num}.jpg) no-repeat center center fixed`,\n    backgroundSize: \"cover\",\n    minHeight: \"100vh\",\n    display: \"flex\",\n  };\n\n  return (\n    <main style={bgStyles}>\n      <Container style={{ margin: \"auto\", width: \"100vw\" }}>\n        <Card>\n          <CardContent>{element}</CardContent>\n        </Card>\n      </Container>\n    </main>\n  );\n};\n\nexport default withLayout;\n","export const SEC = 1;\nexport const MIN = 60 * SEC;\nexport const HOUR = 60 * MIN;\n\nexport const f00 = (n) => (n < 10 ? `0${n}` : String(n));\nexport const ff00 = (n) => f00(Math.floor(n));\nexport const calcTime = (dist, speed) => (dist / speed) * HOUR; // seconds\nexport const calcDist = (time, speed) => (speed * time) / HOUR; // meters\nexport const calcPace = (time, dist) => (time / dist) * 1000; // seconds(/km)\nexport const calcSpeed = (time, dist) => (dist * HOUR) / time; // meters(/hour)\n\nconst TS = [HOUR, MIN, SEC];\nexport const parseTime = (time = \"\") =>\n  time.split(\":\").reduce((acc, el, i) => acc + (Number(el) * TS[i] || 0), 0);\n","import React from \"react\";\nimport { ff00 } from \"../utils\";\n\n// eslint-disable-next-line react/prop-types\nconst TimePicker = ({ onChange, time, step }) => {\n  const parsedTime = [time / 3600, Math.floor(time / 60) % 60, time % 60].map(ff00).join(\":\");\n  return <input type=\"time\" value={parsedTime} onChange={onChange} step={step} />;\n};\n\nexport default TimePicker;\n","import React from \"react\";\nimport { Button, Slider } from \"@material-ui/core\";\n\nconst speeds = [\n  { label: \"Walk\", value: 6000 },\n  { label: \"Jog\", value: 8000 },\n  { label: \"Run\", value: 12000 },\n  { label: \"Fast\", value: 15000 },\n  { label: \"Bekele\", value: 24000 },\n];\n\n// eslint-disable-next-line react/prop-types\nconst SpeedPicker = ({ value, color, onChange }) => (\n  <>\n    <Slider\n      min={6000}\n      max={24000}\n      value={value}\n      color={color}\n      onChange={onChange}\n      onWheel={onChange}\n    />\n    <div>\n      {speeds.map((d) => (\n        <Button color={color} key={`s${d.value}`} onClick={(e) => onChange(e, d.value)}>\n          {d.label}\n        </Button>\n      ))}\n    </div>\n  </>\n);\n\nexport default SpeedPicker;\n","import React from \"react\";\nimport { Button, Slider } from \"@material-ui/core\";\n\nconst distances = [\n  { label: \"Mile\", value: 1610 },\n  { label: \"5K\", value: 5000 },\n  { label: \"10K\", value: 10000 },\n  { label: \"Â½ Marathon\", value: 21100 },\n  { label: \"Marathon\", value: 42200 },\n  { label: \"50K\", value: 50000 },\n  { label: \"100K\", value: 100000 },\n];\n\n// eslint-disable-next-line react/prop-types\nconst TimePicker = ({ value, color, onChange }) => (\n  <>\n    <Slider\n      min={100}\n      max={50000}\n      value={value}\n      color={color}\n      onChange={onChange}\n      onWheel={onChange}\n    />\n    <div>\n      {distances.map((d) => (\n        <Button color={color} key={`d${d.value}`} onClick={(e) => onChange(e, d.value)}>\n          {d.label}\n        </Button>\n      ))}\n    </div>\n  </>\n);\n\nexport default TimePicker;\n","import { useState } from \"react\";\nimport { calcSpeed, calcTime, calcDist } from \"./index\";\n\nexport default function useCalc(initialState) {\n  const { time: initialTime, dist: initialDist, speed: initialSpeed } = initialState;\n\n  const [time, setTime] = useState(initialTime);\n  const [dist, setDist] = useState(initialDist);\n  const [speed, setSpeed] = useState(initialSpeed);\n  const [timeLocked, setTimeLocked] = useState(true);\n\n  const updateTime = (newTime) => {\n    setTime(newTime);\n    setSpeed(calcSpeed(newTime, dist));\n  };\n\n  const updateDist = (newDist) => {\n    setDist(newDist);\n    if (timeLocked) setSpeed(calcSpeed(time, newDist));\n    else setTime(calcTime(newDist, speed));\n  };\n\n  const updateSpeed = (newSpeed) => {\n    setSpeed(newSpeed);\n    if (timeLocked) setDist(calcDist(time, newSpeed));\n    else setTime(calcTime(dist, newSpeed));\n  };\n\n  const update = (key, newValue) => {\n    switch (key) {\n      case \"time\":\n        return updateTime(newValue || time); // TODO: ??\n      case \"dist\":\n        return updateDist(newValue || dist); // TODO: ??\n      case \"speed\":\n        return updateSpeed(newValue || speed); // TODO: ??\n      case \"timeLocked\":\n        return setTimeLocked(newValue || !timeLocked); // TODO: ??\n      default:\n        return null;\n    }\n  };\n\n  return [time, dist, speed, update];\n}\n","import React, { useState } from \"react\";\nimport { Typography, IconButton } from \"@material-ui/core\";\nimport LockIconOutlined from \"@material-ui/icons/Lock\";\nimport LockOpenIconOutlined from \"@material-ui/icons/LockOpen\";\nimport TimePicker from \"./TimePicker\";\nimport SpeedPicker from \"./SpeedPicker\";\nimport DistancePicker from \"./DistancePicker\";\nimport { ff00, parseTime } from \"../utils\";\nimport useCalc from \"../utils/useCalc\";\n\nconst Main = () => {\n  const [timeLocked, setTimeLocked] = useState(true);\n  const [time, dist, speed, update] = useCalc({\n    time: 90 * 60 + 20,\n    dist: 10000,\n    speed: 10000,\n  });\n\n  const stepDist = 100;\n  const stepSpeed = 100;\n\n  const handleTime = (evt, value) => {\n    const newTime = value || parseTime(evt.target.value); // TODO: ??\n    update(\"time\", newTime);\n  };\n\n  const handleDist = (evt, value) => {\n    const newDist = value || dist + stepDist * -Math.sign(evt.deltaY); // TODO: ??\n    update(\"dist\", newDist);\n  };\n\n  const handleSpeed = (evt, value) => {\n    const newSpeed = value || speed + stepSpeed * -Math.sign(evt.deltaY); // TODO: ??\n    update(\"speed\", newSpeed);\n  };\n\n  const toggleTimeLock = () => setTimeLocked(!timeLocked);\n\n  const kph = speed / 1000;\n  const mpk = 60 / kph;\n  const ms = [mpk, (mpk % 1) * 60].map(ff00).join(\":\");\n\n  return (\n    <>\n      <section>\n        <Typography component=\"h1\" variant=\"h6\">\n          Time\n        </Typography>\n        <TimePicker time={time} onChange={handleTime} step={1} />\n        <IconButton onClick={toggleTimeLock}>\n          {timeLocked ? <LockIconOutlined /> : <LockOpenIconOutlined />}\n        </IconButton>\n      </section>\n      <section>\n        <Typography component=\"h1\" variant=\"h6\">\n          {`Distance ${(dist / 1000).toFixed(1)}km`}\n        </Typography>\n      </section>\n      <section>\n        <DistancePicker color=\"primary\" value={dist} onChange={handleDist} step={stepDist} />\n        <Typography component=\"h1\" variant=\"h6\">\n          {`Pace ${ms}/km (${kph.toFixed(1)}kph)`}\n        </Typography>\n        <SpeedPicker color=\"secondary\" value={speed} onChange={handleSpeed} step={stepSpeed} />\n      </section>\n    </>\n  );\n};\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useMemo } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CssBaseline, useMediaQuery } from \"@material-ui/core\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport renderLayout from \"./layout/renderLayout\";\nimport Main from \"./components/Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = useMemo(\n    () => createMuiTheme({ palette: { type: prefersDarkMode ? \"dark\" : \"light\" } }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {renderLayout(<Main />)}\n    </ThemeProvider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}